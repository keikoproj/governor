apiVersion: v1
kind: Namespace
metadata:
  name: governor
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: node-reaper
  namespace: governor
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: node-reaper
rules:
- apiGroups: [""]
  resources: ["nodes", "pods"]
  verbs: ["get", "list", "patch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "create"]
- apiGroups: [""]
  resources: ["pods/eviction"]
  verbs: ["create"]
- apiGroups: ["batch"]
  resources: ["cronjobs"]
  verbs: ["get", "patch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets"]
  verbs: ["get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: node-reaper
subjects:
- kind: ServiceAccount
  name: node-reaper
  namespace: governor
roleRef:
  kind: ClusterRole
  name: node-reaper
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: node-reaper
  namespace: governor
spec:
  # Scan every 10 minutes
  schedule: "*/10 * * * *"
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 3
  # Disallow concurrent executions
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 900
  backoffLimit: 0
  jobTemplate:
    spec:
      # Terminate long running pods
      activeDeadlineSeconds: 14400
      template:
        spec:
          serviceAccountName: node-reaper
          restartPolicy: Never
          containers:
          - name: node-reaper
            env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            # Expose self nodeName as NODE_NAME environment variable - required for reapOld
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            image: governor:latest
            args:
            - governor
            - reap
            - node
            - --dry-run=true
            # Only operate in us-west-2
            - --region=us-west-2
            # Consider nodes reapable after 10 mintues in a bad state
            - --reap-after=10
            # Only reap nodes without active pods
            - --soft-reap=true
            # Unknown nodes are reapable
            - --reap-unknown=true
            # NotReady nodes are reapable
            - --reap-unready=true
            # Wait 180 seconds after each unhealthy node termination
            - --reap-throttle=180
            # Nodes with an invalid/incorrect instance-id are reapable
            - --reap-ghost=true
            # Nodes which fail to join the cluster are reapable
            - --reap-unjoined=true
            # Nodes should join the cluster within 15 mintues
            - --reap-unjoined-threshold-minutes=15
            # Tag key and value used to identify an unjoined node, this is an EC2 tag that should
            # exist on the instances as they are launched (part of ASG), be careful not to get this
            # wrong as it can cause termination of other instances if they are not detected as nodes
            # in the cluster
            - --reap-unjoined-tag-key=KubernetesCluster
            - --reap-unjoined-tag-value=my-cluster-name
            # Old nodes are reapable
            - --reap-old
            # Nodes older than 30 days are considered age-reapable
            - --reap-old-threshold-minutes=43200
            # Wait 1hr after each old node termination
            - --reap-old-throttle=3600
            # Kill a maximum of 1 nodes per run considering throttle wait times
            - --max-kill-nodes=1
            # Ignore Failure and keep the node as Cordoned, default False
            - --ignore-failure=false
